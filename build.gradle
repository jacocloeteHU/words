plugins {
	id 'java'
	id 'maven-publish'
	id 'org.springframework.boot' version '2.2.6.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'jacoco'
    id "org.sonarqube" version "2.7.1"
}

group 'com.lingo'
version '1.0-SNAPSHOT'
sourceCompatibility = '1.8'

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'lingo/words/infrastructure/api/**',
                    '**/TxtWordDeserializer**',
                    '**/JsonWordDeserializer**'
            ])
        }))
    }
}

repositories {
	mavenCentral()
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/jacocloeteHU/words")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getProperty("USERNAME")
                password = project.findProperty("gpr.password") ?: System.getProperty("PASSWORD")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            artifact bootJar
        }
    }
}

//create a single Jar with all dependencies
bootJar {
	mainClassName = 'lingo.words.WordsApplication'
}


task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        //xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.enabled true
        csv.enabled false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

subprojects {
    sonarqube {
        properties {
            property "sonar.sources", "src"
        }
    }
}


dependencies {
 	compile('org.springframework.boot:spring-boot-starter-web')
	compile 'org.apache.maven.plugins:maven-surefire-plugin:2.21.0'

	implementation 'org.springframework.boot:spring-boot-starter-jersey'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
}

test {
	useJUnitPlatform()
	
}
